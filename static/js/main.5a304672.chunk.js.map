{"version":3,"sources":["index.js"],"names":["todoId","App","props","handleClock","setState","date","Date","handleSubmit","e","preventDefault","state","inputValue","trim","alert","length","newItem","id","todoList","concat","handleChange","target","value","handleChkChange","check_alls","document","querySelectorAll","allChk","querySelector","checked","clock","interval","setInterval","this","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","year","month","day","hour","minute","second","weeks","className","getDay","map","week","ix","key","name","onSubmit","onChange","type","placeholder","htmlFor","el","Component","ReactDOM","render","getElementById"],"mappings":"+OAIIA,G,MAAS,GAEPC,E,YAEF,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAQVC,YAAc,WACV,EAAKC,SAAS,CACVC,KAAM,IAAIC,QAXC,EAenBC,aAAe,SAACC,GAEZ,GADAA,EAAEC,kBACI,EAAKC,MAAMC,WAAWC,OAAS,OAAOC,MAAM,4DAClD,GAAI,EAAKH,MAAMC,WAAWG,OAAS,IAAK,OAAOD,MAAM,2EACrD,IAAME,EAAU,CACZJ,WAAY,EAAKD,MAAMC,WACvBK,GAAIhB,KAER,EAAKI,UAAS,SAAAM,GAAK,MAAK,CACpBO,SAAUP,EAAMO,SAASC,OAAOH,GAChCJ,WAAY,QAzBD,EA8BnBQ,aAAe,SAACX,GACZ,EAAKJ,SAAS,CACVO,WAAYH,EAAEY,OAAOC,SAhCV,EAoCnBC,gBAAkB,SAACd,GACf,IAAMe,EAAaC,SAASC,iBAAiB,0BACvCC,EAASF,SAASG,cAAc,wBAFjB,uBAIrB,YAAsBJ,EAAtB,wDACcK,UAAUF,EAAOE,SALV,oFApCN,EA4CnBC,MAAQ,WACJ,EAAKC,SAAWC,YAAY,EAAK5B,YAAa,MA3C9C,EAAKO,MAAQ,CACTO,SAAU,GACVZ,KAAM,IAAIC,KACVK,WAAY,IALD,E,iFAiDfqB,KAAKH,U,+BAGC,IAAD,EACkCG,KAAKtB,MAApCL,EADH,EACGA,KAAMY,EADT,EACSA,SAAUN,EADnB,EACmBA,WADnB,EAE4C,CAACN,EAAK4B,cAAgB5B,EAAK6B,WAAa,EAAI7B,EAAK8B,UAAW9B,EAAK+B,WAAY/B,EAAKgC,aAAchC,EAAKiC,cAA/IC,EAFF,KAEQC,EAFR,KAEeC,EAFf,KAEoBC,EAFpB,KAE0BC,EAF1B,KAEkCC,EAFlC,KAGCC,EAAQ,CAAC,qBAAO,qBAAO,qBAAO,qBAAO,qBAAO,qBAAO,sBAIzD,OAFAb,KAAKV,kBAGD,yBAAKwB,UAAU,aACX,yBAAKA,UAAU,UACX,mDAEJ,yBAAKA,UAAU,WACX,+BACI,+BACI,4BACI,4BAAKJ,EAAO,GAAK,eAAO,eAAxB,IAA+BA,EAAO,GAAKA,EAAO,GAAKA,EAAvD,IAA8DC,EAA9D,IAAuEC,IAE3E,4BACI,4BAAKL,EAAL,UAAaC,EAAb,UAAsBC,EAAtB,UAA6BI,EAAMxC,EAAK0C,aAGhD,+BACI,4BACKF,EAAMG,KAAI,SAACC,EAAMC,GAAP,OAAc,wBAAIC,IAAKD,EAAIE,KAAMH,GAAOA,SAI/D,yBAAKH,UAAU,cACX,6BACI,0BAAMO,SAAUrB,KAAKzB,cACjB,2BACIc,MAAOV,EACP2C,SAAUtB,KAAKb,aACfoC,KAAK,OACLC,YAAY,qEAChB,mDAIZ,yBAAKV,UAAU,mBACX,yBAAKA,UAAU,YACX,yDACA,yBAAKA,UAAU,aACX,2BAAOS,KAAK,WAAWH,KAAK,SAASpC,GAAG,MAAMsC,SAAUtB,KAAKV,kBAC7D,2BAAOmC,QAAQ,OAAf,0CAEJ,4BACKxC,EAAS+B,KAAI,SAACU,EAAIR,GAAL,OACV,wBAAIC,IAAKO,EAAG1C,IACR,6BACI,2BAAOuC,KAAK,WAAWH,KAAK,WAAWpC,GAAI,MAAM0C,EAAG1C,KACpD,2BAAOyC,QAAS,MAAMC,EAAG1C,IAAK0C,EAAG/C,mBAMrD,yBAAKmC,UAAU,kBACX,iE,GAjHVa,aA0HlBC,IAASC,OAAO,kBAAC5D,EAAD,MAASuB,SAASsC,eAAe,W","file":"static/js/main.5a304672.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\"\r\n\r\nlet todoId = 0;\r\n\r\nclass App extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            todoList: [],\r\n            date: new Date(),\r\n            inputValue: '',\r\n        }\r\n    }\r\n\r\n    handleClock = () => {\r\n        this.setState({\r\n            date: new Date()\r\n        });\r\n    }\r\n    \r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (!(this.state.inputValue.trim())) return alert(\"내용을 입력해주세요.\");\r\n        if (this.state.inputValue.length > 150) return alert(\"150글자 이하로 입력해주세요\")\r\n        const newItem = {\r\n            inputValue: this.state.inputValue,\r\n            id: todoId++\r\n        };\r\n        this.setState(state => ({\r\n            todoList: state.todoList.concat(newItem),\r\n            inputValue: ''\r\n        }));\r\n\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            inputValue: e.target.value\r\n        });\r\n    }\r\n\r\n    handleChkChange = (e) => {\r\n        const check_alls = document.querySelectorAll('input[name=\"complete\"]');\r\n        const allChk = document.querySelector('input[name=\"allChk\"]');\r\n\r\n        for (let check_all of check_alls)\r\n            check_all.checked = allChk.checked ? true : false;\r\n    }\r\n\r\n    clock = () => {\r\n        this.interval = setInterval(this.handleClock, 1000);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.clock();\r\n    }\r\n\r\n    render() {\r\n        const { date, todoList, inputValue } = this.state;\r\n        const [year, month, day, hour, minute, second] = [date.getFullYear(), (date.getMonth() + 1), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds()];\r\n        const weeks = [\"일요일\", \"월요일\", \"화요일\", \"수요일\", \"목요일\", \"금요일\", \"토요일\"];\r\n\r\n        this.handleChkChange()\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"header\">\r\n                    <h1>Welcome to TodoApp</h1>\r\n                </div>\r\n                <div className=\"content\">\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>{hour > 12 ? \"오후\" : \"오전\"} {hour > 12 ? hour - 12 : hour}:{minute}:{second}</th>\r\n                            </tr>\r\n                            <tr>\r\n                                <th>{year}년 {month}월 {day}일 {weeks[date.getDay()]}</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                {weeks.map((week, ix) => <td key={ix} name={week}>{week}</td>)}\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                    <div className=\"input-card\">\r\n                        <div>\r\n                            <form onSubmit={this.handleSubmit}>\r\n                                <input\r\n                                    value={inputValue}\r\n                                    onChange={this.handleChange}                                \r\n                                    type=\"text\" \r\n                                    placeholder=\"오늘 할 일을 적어주세요.\" />\r\n                                <button>추가</button>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"addList flex sb\">\r\n                        <div className=\"todoList\">                        \r\n                            <h2>해야할 일</h2>\r\n                            <div className=\"input_chk\">\r\n                                <input type=\"checkbox\" name=\"allChk\" id=\"all\" onChange={this.handleChkChange}/>\r\n                                <label htmlFor=\"all\">모두 체크하기</label>\r\n                            </div>\r\n                            <ul>\r\n                                {todoList.map((el, ix) =>\r\n                                    <li key={el.id}>\r\n                                        <div>\r\n                                            <input type=\"checkbox\" name=\"complete\" id={\"com\"+el.id} />\r\n                                            <label htmlFor={\"com\"+el.id}>{el.inputValue}</label>\r\n                                        </div>\r\n                                    </li>\r\n                            )}\r\n                            </ul>\r\n                        </div>\r\n                        <div className=\"completionList\">\r\n                            <h2>완료한 일</h2>\r\n                        </div>                    \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}